name: Build cloudflared

on:
  watch:
    types: [started]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 'latest'  # 使用最新的 Go 版本

      - name: Get latest release
        id: get_release
        run: |
          latest_release=$(curl -s https://api.github.com/repos/cloudflare/cloudflared/releases/latest | jq -r .tag_name)
          echo "Latest release is $latest_release"
          echo "::set-output name=version::$latest_release"

      - name: Download release
        run: |
          version=${{ steps.get_release.outputs.version }}
          curl -L "https://github.com/cloudflare/cloudflared/archive/refs/tags/${version}.tar.gz" -o "cloudflared-${version}.tar.gz"
          tar -xzf "cloudflared-${version}.tar.gz"

      - name: Build cloudflared
        run: |
          cd "cloudflared-${{ steps.get_release.outputs.version }}/cmd/cloudflared/"
          version=${{ steps.get_release.outputs.version }}
          CGO_ENABLED=0 GOOS=linux GOARCH=mipsle GOMIPS=softfloat go build -v -a -installsuffix cgo -ldflags "-s -w -extldflags '-static' -X 'main.Version=${version}' -X 'main.BuildTime=$(date +%Y-%m-%d-%H%M) UTC'" -o cloudflared .

      - name: Upload binary
        run: |
          version=${{ steps.get_release.outputs.version }}
          if [ ! -d "cloudflardReleases/${version}" ]; then
            mkdir -p "cloudflardReleases/${version}"
          fi
          mv cloudflared "cloudflardReleases/${version}/cloudflared"
